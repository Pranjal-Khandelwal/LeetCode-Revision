Approach-1(using dfs)
T.C.-O(M*N*N)
S.C.-O(N*N)

class Solution {
public:
    
    void dfs(vector<vector<int>>& grid,int i,int j,int distance=1)
    {
        int m=grid.size();
        int n=grid[0].size();
    
        if (i < 0 || j < 0 || i >= m || j >= n || (grid[i][j] != 0 && grid[i][j] <= distance))
            return;
        
        grid[i][j]=distance;
        
        dfs(grid,i+1,j,distance+1);
        dfs(grid,i,j+1,distance+1);
        dfs(grid,i-1,j,distance+1);
        dfs(grid,i,j-1,distance+1);
        
    }
    int maxDistance(vector<vector<int>>& grid,int maxi=-1) {
        int m=grid.size();
        int n=grid[0].size();
        
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    grid[i][j]=0;
                    dfs(grid,i,j);
                }
            }
        }
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]>1)
                    maxi=max(maxi,grid[i][j]-1);
            }
        }
        return maxi;
    }
};

Approach-2(Using BFS)
T.C.-O(M*N)
S.C.-O(N)

class Solution {
public:
   int maxDistance(vector<vector<int>>& grid) {
       int m=grid.size();
       int n=grid[0].size();
       
		int maxi = 0;
		queue<pair<int, int>> q;
       
		for (int i = 0; i < m; ++i) {
			for (int j = 0; j < n; ++j) {
				if (grid[i][j] == 1) 
                    q.push({ i, j });
			}
		}

		while (!q.empty()) {
			pair<int, int> cur = q.front();
			q.pop();
            
			pair<int, int> dirs[4] = { {0, 1}, {0, -1}, {1, 0}, {-1, 0} };
            
			for (auto dir : dirs) {
				int nx = dir.first + cur.first;
				int ny = dir.second + cur.second;
                
				if (nx >= 0 && nx < grid.size() && ny >= 0 && ny < grid[0].size() && grid[nx][ny] == 0) {
					q.push({ nx, ny });
					grid[nx][ny] = grid[cur.first][cur.second] + 1;
					maxi = max(maxi,grid[nx][ny]);
				}
			}
        }
            if(maxi>0)
           return maxi-1;
       else
           return -1;
        }
};
