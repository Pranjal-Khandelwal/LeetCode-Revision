Approach-1 (USING BFS)
T.C.-O(N)
S.C.-O(N)

class Solution {
public:
    int sumNumbers(TreeNode* root) {
       int sum=0;
        
        queue<pair<TreeNode*,int>>q;
        
        q.push({root,0});
        
        while(!q.empty())
        {
            auto[root,curr]=q.front();
            q.pop();
            
            curr=curr*10+root->val;
            
            if(!root->left && !root->right)
                sum+=curr;
            
            if(root->right)
                q.push({root->right,curr});
            
            if(root->left)
                q.push({root->left,curr});
        }
        return sum;
    }
};

Approach-2(using dfs)
T.C.-O(N)
S.C.-O(H)

class Solution {
public:
    int dfs(TreeNode* root,int current)
    {
        if(!root)
            return 0;
        
        current=current*10+root->val;
        
        if(!root->left && !root->right)
            return current;
        
        return dfs(root->left,current)+dfs(root->right,current);
    }
    
    int sumNumbers(TreeNode* root) {
        return dfs(root,0);
    }
};
