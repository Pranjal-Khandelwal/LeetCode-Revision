Appraoch-1(Greedy Solution)
T.C.-O(NLOGN)
S.C.-O(1)

class Solution {
public:
    int twoCitySchedCost(vector<vector<int>>& costs) {
        int n=costs.size()/2;
        vector<int>v;
        int mincost=0;
        
        for(vector<int>c:costs)
        {
            mincost+=c[0];
            v.push_back(c[1]-c[0]);
        }
        
        sort(v.begin(),v.end());
        
        for(int i=0;i<n;i++)
        {
            mincost+=v[i];
        }
        return mincost;
    }
};

Approach-2 (Dynamic Programming)
T.C.-O(N)
S.C.-O(N^2)

class Solution {
public:
    int cityScheduling(vector<vector<int>>& costs,int i,int c1,int c2,int n,vector<vector<int>>& dp)
    {
        int res=INT_MAX;
        if(c1>n/2 || c2>n/2 || i>=n)
            return 0;
        
         if(dp[c1][c2]!=-1)
            return dp[c1][c2];
        
        // if city a becomes full
        if(c1==n/2)
            return costs[i][1]+cityScheduling(costs,i+1,c1,c2+1,n,dp);
        
        // if city B becomes full
        if(c2==n/2)
            return costs[i][0]+cityScheduling(costs,i+1,c1+1,c2,n,dp);
        
        
        int take_A=costs[i][0]+cityScheduling(costs,i+1,c1+1,c2,n,dp);
        
        int take_B=costs[i][1]+cityScheduling(costs,i+1,c1,c2+1,n,dp);
            
        res=min(take_A,take_B);
         return dp[c1][c2]=res;
    }
    int twoCitySchedCost(vector<vector<int>>& costs) {
         int n = costs.size(); 
        int t = (n/2) + 1;
        
        vector<vector<int>>dp(t,vector<int>(t,-1));
        
        return cityScheduling(costs,0,0,0,n,dp);
    }
};
