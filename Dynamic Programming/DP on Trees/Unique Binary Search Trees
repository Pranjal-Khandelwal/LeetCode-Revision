Approach-1(Recursion)

T.C-O(2^N)
S.C-O(1)


class Solution {
public:
    int numTrees(int n) {
        
        if(n<=1)
            return 1;
        
        long long int res=0;
        
        for(int i=0;i<n;i++)
        {
            res+=numTrees(i)*numTrees(n-i-1);
        }
        return res;
    }
    
};

Approach-2(Dynamic Programming)

T.C-O(N)
S.C-O(N)

class Solution {
public:
    int numTrees(int n) {
        int sumTree[n+1];
        
         sumTree[0]=sumTree[1]=1;
    
        for(int i=2;i<=n;i++)
        {  
            sumTree[i]=0;
            for(int j=0;j<i;j++)
            {
                sumTree[i]+=sumTree[j]*sumTree[i-j-1];
            }
        }
        return sumTree[n];
    }
};
