Approach-1(Using Recursion)
T.C.-O(2^N)
S.C.-O(N)

class Solution {
public:
    
bool fun(string s,string p,int i,int j){
        if(i<0 && j<0)
            return true;
    
        if(i>=0 && j<0) 
            return false;
    
        if(i<0 && j>=0){
            if(p[j]=='*') 
                return fun(s,p,i,j-2);
            else{
                return false;
            }
        }
    
        else{
            if(s[i]==p[j] || p[j]=='.') 
                return fun(s,p,i-1,j-1);
            
            else if(p[j]=='*'){
                if(s[i]==p[j-1] || p[j-1]=='.') return fun(s,p,i-1,j) || fun(s,p,i,j-2);
                else{
                    return fun(s,p,i,j-2);
                }
            }
            else{
                return false;
            }
        }
    }
    
    bool isMatch(string s, string p) {
        int m=s.size();
        int n=p.size();
        
        return fun(s,p,m-1,n-1);
        
    }
};

Approach-2(Using Memoization)
T.C.-O(N*M)
S.C.-O(N*M)

class Solution {
public:
    
bool fun(string s,string p,int i,int j,vector<vector<int>>& dp){
        if(i<0 && j<0)
            return true;
    
        if(i>=0 && j<0) 
            return false;
    
        if(i<0 && j>=0){
            if(p[j]=='*') 
                return fun(s,p,i,j-2,dp);
            else{
                return false;
            }
        }
    
        else{
            if(s[i]==p[j] || p[j]=='.') 
                return fun(s,p,i-1,j-1,dp);
            
            else if(p[j]=='*'){
                if(s[i]==p[j-1] || p[j-1]=='.') 
                    return fun(s,p,i-1,j,dp) || fun(s,p,i,j-2,dp);
                else{
                    return fun(s,p,i,j-2,dp);
                }
            }
            else{
                return false;
            }
        }
    }
    
    bool isMatch(string s, string p) {
        int m=s.size();
        int n=p.size();
        
        vector<vector<int>>dp(m,vector<int>(n,-1));
        return fun(s,p,m-1,n-1,dp);
        
    }
};
