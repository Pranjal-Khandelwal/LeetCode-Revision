Approach-1(Recursion)
T.C-O(k^n)
S.C-O(1)

class Solution {
public:
    long long int jumps(vector<int>& nums,int curr,int end)
    {
        if(curr>=end)
            return 0;
        
        long long int min_value=INT_MAX;
        
        for(int i=1;i<=nums[curr];i++)
        {
            min_value=min(min_value,1+jumps(nums,i+curr,end));
        }
        return min_value;
    }
    int jump(vector<int>& nums) {
        return jumps(nums,0,nums.size()-1);
    }
};

Approach-2(Dynamic Programming)
T.C-O(N*K)
S.C-O(N)

class Solution {
public:
    long long int jumps(vector<int>& nums,int curr,int end,vector<int>& dp)
    {
        if(curr>=end)
            return 0;
        
        if(dp[curr]!=-1)
            return dp[curr];
        
        long long int min_value=INT_MAX;
        
        for(int i=1;i<=nums[curr];i++)
        {
            min_value=min(min_value,1+jumps(nums,i+curr,end,dp));
        }
        dp[curr]=min_value;
        return min_value;
    }
    int jump(vector<int>& nums) {
        vector<int>dp(nums.size(),-1);
        return jumps(nums,0,nums.size()-1,dp);
    }
};


Approach-3(Greedy Solution)
T.C-O(N)
S.C-O(1)

class Solution {
public:
    int jump(vector<int>& nums) {
        int n=nums.size();
        int current_reach=0;
        int max_reach=0;
        int jumps=0;
        
        for(int i=0;i<n-1;i++)
        {
            max_reach=max(max_reach,i+nums[i]);
            
            if(i==current_reach){
                jumps++;
            current_reach=max_reach;
                }
        }
        return jumps;
    }
};
