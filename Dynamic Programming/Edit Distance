Approach-1(Recursion)
T.C-O(3^N)
S.C-O(1)

class Solution {
public:
    int editDistance(string word1,string word2,int m,int n)
    {
        if(m==0)
            return n;
        if(n==0)
            return m;
        
        if(word1[m-1]==word2[n-1])
            return editDistance(word1,word2,m-1,n-1);
        
        return 1+min(editDistance(word1,word2,m-1,n-1),      //update
                     min(editDistance(word1,word2,m-1,n),    //delete
                         editDistance(word1,word2,m,n-1)));   //insert
    }
    int minDistance(string word1, string word2) {
        int m=word1.size();
        int n=word2.size();
        
        return editDistance(word1,word2,m,n);
    }
};

Approach-2 (Recursion+Memoization)
class Solution {
public:
    
    int editDistance(string word1,string word2,int m,int n,vector<vector<int>>& dp)
    {
        if(m==0)
            return n;
        if(n==0)
            return m;
        
        if(dp[m][n]!=-1)
            return dp[m][n];
        
        if(word1[m-1]==word2[n-1])
            return dp[m][n]= editDistance(word1,word2,m-1,n-1,dp);
        
        return dp[m][n]=1+min(editDistance(word1,word2,m-1,n-1,dp),    //update
                     min(editDistance(word1,word2,m-1,n,dp),  //delete
                         editDistance(word1,word2,m,n-1,dp)));            //insert
    }
    int minDistance(string word1, string word2) {
        int m=word1.size();
        int n=word2.size();
        
        vector<vector<int>>dp(m+1,vector<int>(n+1,-1));
     
        
        return dp[m][n]=editDistance(word1,word2,m,n,dp);
    }
};

