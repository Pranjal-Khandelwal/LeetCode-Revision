T.C.-O(N)
S.C-O(1)


class Solution {
public:
    int maxSubarraySumCircular(vector<int>& nums) {
        int n=nums.size();
        
        int Noncircular_sum=kadaneSum(nums);
        
        int total_sum=0;
        
        for(int i=0;i<n;i++)
        {
            total_sum+=nums[i];
            nums[i]=-nums[i];
        }
        
        int circular_sum=total_sum+kadaneSum(nums);
        
        if(circular_sum==0)
            return Noncircular_sum;
        
        return max(circular_sum,Noncircular_sum);
    }
    
    int kadaneSum(vector<int>& nums)
    {
        int n=nums.size(),sum=0;
        int maximum_sum=INT_MIN;
        
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
            
            maximum_sum=max(maximum_sum,sum);
            
             if(sum<0)
            sum=0;
        }
        
       return maximum_sum;
    }
};
