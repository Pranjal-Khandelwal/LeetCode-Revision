Approach-1(Using Heap)
T.C-O(NLOGN)
S.C.-O(N)

class Solution {
public:
    vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        int n=arr.size();
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        
        for(int i=0;i<n;i++)
        {
            pq.push({abs(arr[i] - x), arr[i]});
        }
        
        vector<int>res;
        
        for(int i=0;i<k;i++)
        {
            res.push_back(pq.top().second);
            pq.pop();
        }
        
        sort(res.begin(),res.end());
        
        return res;
    }
};

Approach-2(Binary Search)
vector<int> findClosestElements(vector<int>& arr, int k, int x) {
        int n=arr.size();
    
        int low=0;
        int high=n-k;
        
        while(low<high)
        {
            int mid=low+(high-low)/2;
            
            if(x-arr[mid]>arr[mid+k]-x)
                low=mid+1;
              
            else
                 high=mid;
        }
        return vector<int>(arr.begin()+low,arr.begin()+low+k);
            
           
        
        
    }
};
