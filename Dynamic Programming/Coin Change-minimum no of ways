Approach-1(Recursion)
T.C-O(2^N)
S.C-O(1)

class Solution {
public:
    int CoinChangeDemo(vector<int>& coins,int n,int amount)
    {
        if(amount==0)
            return 0;
        
        if(amount<0)
         return 100005;
        
        if(n==0)
		return  100005;
        
            if(coins[n-1]<=amount){
             return min(CoinChangeDemo(coins,n-1,amount),1+CoinChangeDemo(coins,n,amount-coins[n-1]));   
            }
           
                else{
                    return CoinChangeDemo(coins,n-1,amount);
                }
        }
        
    int coinChange(vector<int>& coins, int amount) {
        int ans=CoinChangeDemo(coins,coins.size(),amount);
        
        if(ans==100005)
            return -1;
        else
            return ans;
    }
};

Approach-2(DP TopDowm)
T.C-O(N^2)
S.C-O(N^2)

class Solution {
public:
   
            
    int coinChange(vector<int>& coins, int amount) {
        int n = coins.size();
	
      long long dp[n + 1][amount + 1];
        
      for (int i = 0; i <= n; i++)
        dp[i][0] = 0;

      for (int j = 1; j <= amount; j++)
        dp[0][j] = INT_MAX;

      for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= amount; j++) {
            
          if (coins[i - 1] <= j)
            dp[i][j] = min(1 + dp[i][j - coins[i - 1]], dp[i - 1][j]);
            
          else
            dp[i][j] = dp[i - 1][j];
        }
      }
        
      if (dp[n][amount] == INT_MAX)
          return -1;
        
      return dp[n][amount];
        

    }
};
