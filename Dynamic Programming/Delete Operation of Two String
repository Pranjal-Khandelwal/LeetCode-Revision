Approach-1(Using Recursion)
T.C.-O(2^max(m,n))
S.C.-O(max(m,n))

class Solution {
public:
    int lcs(string word1,string word2,int m,int n)
    {
        if(m==0 || n==0)
            return 0;
        
        if(word1[m-1]==word2[n-1])
        {
            return 1+lcs(word1,word2,m-1,n-1);
        }
        else
            return max(lcs(word1,word2,m,n-1),lcs(word1,word2,m-1,n));
    }
    int minDistance(string word1, string word2) {
        int m=word1.size();
        int n=word2.size();
        
        return m+n-2*lcs(word1,word2,m,n);
    }
};

Approach-2(Using Memoization)
class Solution {
public:
    int dp[501][501];
    int lcs(string word1,string word2,int m,int n)
    {
        if(m==0 || n==0)
            return 0;
        
        if(dp[m][n]!=-1)
            return dp[m][n];
        
        if(word1[m-1]==word2[n-1])
        {
            return dp[m][n]=1+lcs(word1,word2,m-1,n-1);
        }
        else
            return dp[m][n]=max(lcs(word1,word2,m,n-1),lcs(word1,word2,m-1,n));
    }
    int minDistance(string word1, string word2) {
        int m=word1.size();
        int n=word2.size();
        
        memset(dp,-1,sizeof(dp));
        
        return dp[m][n]=m+n-2*lcs(word1,word2,m,n);
    }
};

Approach-3(Using Tabulation)

class Solution {
public:
    int minDistance(string word1, string word2) {
        int m=word1.size();
        int n=word2.size();
        
        int dp[m+1][n+1];
        
        for(int i=0;i<=m;i++)
        {
            dp[i][0]=0;
        }
        
        for(int j=0;j<=n;j++)
        {
            dp[0][j]=0;
        }
        
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(word1[i-1]==word2[j-1])
                    dp[i][j]=1+dp[i-1][j-1];
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return m+n-2*dp[m][n];
    }
};
