Approach-1(Recursion)
class Solution {
public:
    int minsum(vector<vector<int>>&grid,int m,int n)
    {
        if(m<0 || n<0)
            return INT_MAX;
        if(m==0 && n==0)
            return grid[m][n];
        
        return grid[m][n]+min(minsum(grid,m-1,n),minsum(grid,m,n-1));
    }
    int minPathSum(vector<vector<int>>& grid) {
      int m=grid.size();
      int n=grid[0].size();
        return minsum(grid,m-1,n-1);
        
        
        
    }
}; 

Approach-2(Dynamic Programming-Top Down)
  int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<vector<int> > dp(m, vector<int>(n, grid[0][0]));
        
        for(int i=1;i<m;i++)
        {
            dp[i][0]=dp[i-1][0]+grid[i][0];
        }
        for(int j=1;j<n;j++)
        {
            dp[0][j]=dp[0][j-1]+grid[0][j];
        }
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
                dp[i][j]=min(dp[i][j-1],dp[i-1][j])+grid[i][j];
            }
        }
        return dp[m-1][n-1];
      
        
        
    }
}; 

