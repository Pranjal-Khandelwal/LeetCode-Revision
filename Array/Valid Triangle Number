Approach-1(Brute Force)

T.C-O(N^3)
S.C-O(1)

class Solution {
public:
    int triangleNumber(vector<int>& nums) {
        int count=0;
        for(int i=0;i<nums.size();i++)
        {
            for(int j=i+1;j<nums.size();j++)
            {
                for(int k=j+1;k<nums.size();k++)
                {
                    if(nums[i]+nums[j]>nums[k] && nums[i]+nums[k]>nums[j] && nums[j]+nums[k]>nums[i])
                    {
                        count++;
                    }
                }
            }
        }
        return count;
    }
};


Approach-2(Using Binary Search)

T.C-O(NLOGN)
S.C-O(1)

class Solution {
public:
    int triangleNumber(vector<int>& nums) {
        int res = 0, n = nums.size();
        
        sort(nums.begin(), nums.end());
        
        for (int i = n-1; i >= 0; i--) {
            int low = 0, high = i-1;
            
            while (low < high) {
                if (nums[low] + nums[high] > nums[i]) {
                    res += high - low;
                    high--;
                }
                
                else low++;
            }
        }
        
        return res;
    }
};
