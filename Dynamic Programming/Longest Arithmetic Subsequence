Approach-1(Using three pointers)

T.C-O(N^3)
S.C-O(N^2)

class Solution {
public:
    int longestArithSeqLength(vector<int>& nums) {
        int n=nums.size();
        int res=0;
        
        vector<vector<int>>dp(n,vector<int>(n,1));
        
        for(int i=1;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                for(int k=i-1;k>=0;k--)
                {
                    if(nums[i]-nums[k]==nums[j]-nums[i])
                        dp[i][j]=max(dp[i][j],dp[k][i]+1);
                }
                res=max(res,dp[i][j]);
            }
        }
        return 1+res;
    }
};

Approach-2(Using vector and unordered_map)
T.C-O(N^2)
S.C-O(N)

class Solution {
public:
    int longestArithSeqLength(vector<int>& nums) {
        int n=nums.size();
        int res=0;
        
        vector<unordered_map<int,int>>dp(n);
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                int diff=nums[j]-nums[i];
                
                if(dp[j].count(diff))
                    dp[i][diff]=dp[j][diff]+1;
                else
                    dp[i][diff]=2;
        
                res=max(res,dp[i][diff]);
            }
        }
        return res;
    }
};

