Approach-1
T.C-O(N)
s.c-O(N)

class Solution {
public:
    int max_depth;
    int sumhelper(TreeNode* root,int depth)
    {
        if(!root)
            return 0;
        
        if(depth==max_depth-1)
            return root->val;
        
        return sumhelper(root->left,depth+1)+sumhelper(root->right,depth+1);     
    }
    
    int depthhelper(TreeNode* root)
    {
        if(!root)
            return 0;
        return max(1+depthhelper(root->left),1+depthhelper(root->right));
        
    }
    int deepestLeavesSum(TreeNode* root) {
        if(!root)
            return 0;
        
        max_depth=depthhelper(root);
        
        return sumhelper(root,0);
        
    }
};

Approach-2(Using BFS)
T.C-O()
S.C-O()
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
       if(root==NULL) return 0;
        queue<TreeNode *> q;
        q.push(root);
        int sum=0;
        while(!q.empty()){
            int size= q.size(); 
            sum=0;
	
            for(int i=0;i<size;i++){
                TreeNode* front=q.front();
                q.pop();
                sum+=front->val;
                if(front->left!=NULL) q.push(front->left);
                if(front->right!=NULL) q.push(front->right);
            }
        }
		
        return sum;
    }
};
