Approach-1(using Using Node Indegree)
T.C-O(V+E)
S.C-O(V+E)

class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        
        queue<int>q;
        vector<int>indegree(numCourses,0);
        vector<int>adj[numCourses];
        
        for(int i=0;i<prerequisites.size();i++)
            {
            adj[prerequisites[i][1]].push_back(prerequisites[i][0]);
            indegree[prerequisites[i][0]]++;
        }
        
        for(int i=0;i<numCourses;i++)
            {
            if(indegree[i]==0)
                q.push(i);
        }
        
        vector<int>res;
        
        if(q.empty())
            return res;
        
        while(!q.empty())
            {
            int node=q.front();
            q.pop();
            
            res. push_back(node);
            for(auto it:adj[node])
                {
                indegree[it]--;
                if(indegree[it]==0)
                    q.push(it);
            }
        }
        if(res.size()==numCourses)
            return res;
        else
            return vector<int>{};
    }
};
