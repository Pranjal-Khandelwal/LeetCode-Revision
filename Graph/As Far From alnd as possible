Approach-1(using dfs)
T.C.-O(M*N*N)
S.C.-O(N*N)

class Solution {
public:
    
    void dfs(vector<vector<int>>& grid,int i,int j,int distance=1)
    {
        int m=grid.size();
        int n=grid[0].size();
    
        if (i < 0 || j < 0 || i >= m || j >= n || (grid[i][j] != 0 && grid[i][j] <= distance))
            return;
        
        grid[i][j]=distance;
        
        dfs(grid,i+1,j,distance+1);
        dfs(grid,i,j+1,distance+1);
        dfs(grid,i-1,j,distance+1);
        dfs(grid,i,j-1,distance+1);
        
    }
    int maxDistance(vector<vector<int>>& grid,int maxi=-1) {
        int m=grid.size();
        int n=grid[0].size();
        
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                {
                    grid[i][j]=0;
                    dfs(grid,i,j);
                }
            }
        }
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]>1)
                    maxi=max(maxi,grid[i][j]-1);
            }
        }
        return maxi;
    }
};
