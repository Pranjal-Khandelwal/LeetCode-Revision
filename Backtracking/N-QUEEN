class Solution {
    vector<vector<string>>res;
public:
    bool isSafe(vector<string> &board,int row,int col)
    {
        for(int i=0;i<board.size();i++)
        {
            if(board[i][col]=='Q'){
                return false;
            }
        }
        
        // Diagonal row decreasing and col is decreasing
        int x=row,y=col;
        while(x>=0 && y>=0)
        {
            if(board[x][y]=='Q'){
                return false;
            }
            
            x--,y--;
        }
        
        // Diagonal 
        while(row>=0 && col<board.size())
        {
            if(board[row][col]=='Q')
            {
                return false;
            }
            row--;
            col++;
        }
        
        return true;
    }
    
    void QueenPlace(vector<string> &board,int row)
    {
        if(row==board.size())
        {
            res.push_back(board);
            return;
        }
        
        for(int col=0;col<board.size();col++)
        {
            if(isSafe(board,row,col))
            {
                board[row][col]='Q';
                QueenPlace(board,row+1);
                board[row][col]='.';
            }
        }
    }
    
    vector<vector<string>> solveNQueens(int n) {
        vector<string>board(n,string(n,'.'));
        QueenPlace(board,0);
        
        return res;
    }
};
