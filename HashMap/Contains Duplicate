Approach-1(Brute Force)
T.C.-O(N^2)
S.C.-O(1)

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
       int n=nums.size();
        
        for(int i=0;i<n;i++)
        {
            int value=nums[i];
            
            for(int j=i+1;j<n;j++)
            {
                if(nums[j]==value)
                    return true;
            }
        }
            return false;
    }
};

Approach-2(Better than Brute Force but not optimized)
T.C.-O(NLOGN)
S.C.-O(1)

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        int n=nums.size();
        
        sort(nums.begin(),nums.end());
        
        for(int i=1;i<n;i++)
        {
            if(nums[i]==nums[i-1])
                return true;
        }
        return false;
    }
};


Approach-3(Using Hashmap)
T.C.-O(N)
S.C.-O(N)

class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        int n=nums.size();
        unordered_map<int,int>mp;
        
        for(int i=0;i<n;i++)
        {
            mp[nums[i]]++;
        }
       
        for(auto x:mp)
        {
            if(x.second>1)
                return true;
        }
        return false;
    }
};
