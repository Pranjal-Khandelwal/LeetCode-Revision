Approach-1(Using 2-Pointers)

T.C-O(NLOGN)
S.C-O(1)

class Solution {
public:
    int maxOperations(vector<int>& nums, int k) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        
        int i=0,j=n-1,sum,count=0;
        
        while(i<j)
        {
            sum=nums[i]+nums[j];
            
            if(sum==k)
            {
                count++;
                i++;
                j--;
            }
            else if(sum>k){
                j--;
                }
            else
            {
                i++;
            }
                
        }
        return count;
    }
};

Approach-2(Using Hashmap)

class Solution {
public:
    int maxOperations(vector<int>& nums, int k) {
        unordered_map<int,int>mp;
        
        int count=0;
        
        for(auto num:nums)
        {
            if(mp[k-num]>0)
            {
                count++;
                mp[k-num]--;
            }
                else
                {
                    mp[num]++;
                }        
        }
        return count;
    }
};


