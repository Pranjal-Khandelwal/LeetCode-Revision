Approach-1(Using DFS)

class Solution {
public:
    void surroundedDfs(vector<vector<char>>& board,int row,int col,int m,int n)
    {
        if(row<0 || col<0 || row>=m || col>=n || board[row][col]!='O')
            return;
        
        board[row][col]='#';
            
            surroundedDfs(board,row-1,col,m,n);
            surroundedDfs(board,row+1,col,m,n);
            surroundedDfs(board,row,col-1,m,n);
            surroundedDfs(board,row,col+1,m,n);
        
    }
    void solve(vector<vector<char>>& board) {
        int m=board.size();
        int n=board[0].size();
        
        if(m==0)
            return;
            
        
        // first col and last col
        
        for(int i=0;i<m;i++)
        {
                if(board[i][0]=='O')
                    surroundedDfs(board,i,0,m,n);
                
                if(board[i][n-1]=='O')
                    surroundedDfs(board,i,n-1,m,n);
        }
        
        // for first row amd last row
        
            for(int j=0;j<n;j++)
            {
                if(board[0][j]=='O')
                  surroundedDfs(board,0,j,m,n);
                
                if(board[m-1][j]=='O')
                    surroundedDfs(board,m-1,j,m,n);
            }
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
               if(board[i][j]=='O')
                   board[i][j]='X';
                
                if(board[i][j]=='#')
                    board[i][j]='O';
            }
        }
    }
};
