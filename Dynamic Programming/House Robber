Approach-1(Recursion)
T.C-O(2^N)
S.C-O(1)

class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        
        return robber(nums,n-1);
    }

    int robber(vector<int>&nums,int i)
    {
        if(i<0)
            return 0;
        
        return max(robber(nums,i-2)+nums[i],robber(nums,i-1));
        
        
    }
};

Approach-2(Dynamic Programming)
T.C-O(N)
S.C-O(N)

class Solution {
public:
    int rob(vector<int>& nums) {
       int  n=nums.size();
        vector<int>dp(n,0);
        
        if(n==0)
         return 0;
        if(n==1)
            return nums[0];
      
        
        dp[0]=nums[0];
        dp[1]=max(nums[0],nums[1]);
        
        for(int i=2;i<n;i++)
        {
            dp[i]=max(dp[i-2]+nums[i],dp[i-1]);
        }
        return dp[n-1];
    }
};
