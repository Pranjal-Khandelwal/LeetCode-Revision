Approach-1(Using Recursion)
T.C.-O(N^T) WHERE N is number of elements and T is Target value.
S.C.-O(T)

class Solution {
public:
    int combinationSum(vector<int>& nums,int target,vector<int>& dp)
    {
        int n=nums.size();
        if(target==0)
            return 1;
        
        if(dp[target]!=-1)
            return dp[target];
        
        dp[target]=0;
        
        for(int i=0;i<n;i++)
        {
            if(nums[i]<=target)
            dp[target]+=combinationSum(nums,target-nums[i],dp);
        }
        return dp[target];
    }
    int combinationSum4(vector<int>& nums, int target) {
        vector<int>dp(target+1,-1);
        return combinationSum(nums,target,dp);
    }
};

Approach-2(Memoization)
T.C.-O(N*T)
S.C.-O(N)

class Solution {
public:
    int combinationSum(vector<int>& nums,int target,vector<int>& dp)
    {
        int n=nums.size();
        if(target==0)
            return 1;
        
        if(dp[target]!=-1)
            return dp[target];
        
        dp[target]=0;
        
        for(int i=0;i<n;i++)
        {
            if(nums[i]<=target)
            dp[target]+=combinationSum(nums,target-nums[i],dp);
        }
        return dp[target];
    }
    int combinationSum4(vector<int>& nums, int target) {
        vector<int>dp(target+1,-1);
        return combinationSum(nums,target,dp);
    }
};

Approach-3(Using Tabulation)
T.C.-O(N*T)
S.C.-O(T)

class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
        int n=nums.size();
        long long int dp[target+1];
        
        dp[0]=1;
        
        
        for(int i=1;i<=target;i++){
            dp[i]=0;
        for(int num:nums){
            if(num<=i)
                dp[i]+=dp[i-num];
            if(dp[i]>INT_MAX)
                break;
        }
        }
        return dp[target];
    }
};
