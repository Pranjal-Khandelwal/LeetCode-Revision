Approach-1(Using Brute Force)
T.C.-O(N^2)
S.C.-O(1)

class Solution {
public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        int n=nums.size();
        
        int count=0;
        long long product=1;
        
        if(k==0)
            return 0;

        
        for(int i=0;i<n-1;i++)
        {
            product=nums[i];
            
            if(nums[i]>=k)
            continue;
            
            count++;
            for(int j=i+1;j<n;j++)
            {
                product=product*nums[j];
                
                if(product<k)
                count++;
                else
                    break;
            }
        }
        if(nums[n-1]>=k)
            return count;
        else
           return  count+1;
    }
};

Approach-2(Sliding Window Approach)-------Optimized Code
T.C.-O(N)
S.C.-O(1)

class Solution {
public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        int n=nums.size();
        
        if(k==0 || k==1)
            return 0;
        
        int left=0,right=0,res=0,product=1;
        
        while(right<n)
        {
            product=product*nums[right];
            
                while(product>=k)
                {
                    product=product/nums[left];
                    left++;
                }
            res+=right-left+1;
            
            right++;
        }
        return res;
    }
};
