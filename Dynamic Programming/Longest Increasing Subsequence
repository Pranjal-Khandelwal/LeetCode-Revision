Approach-1(Recursion)

class Solution {
public:
    int LIS(vector<int>& nums,int currentIndex,int previousIndex)
    {
        if(currentIndex==nums.size())
            return 0;
        
        int res=0;
        
        if(previousIndex==-1 || nums[previousIndex]<nums[currentIndex])
           res=1+LIS(nums,currentIndex+1,currentIndex);
        
        res=max(res,LIS(nums,currentIndex+1,previousIndex));
        
        return res;
            
    }
    int lengthOfLIS(vector<int>& nums) {
        return LIS(nums,0,-1);
    }
};

Approach-2(Tabulation)
T.C-O(N^2)
S.C-O(N)

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n=nums.size();
        
        vector<int>dp(n,1);
        
        int res=1;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[i]>nums[j])
                    dp[i]=max(dp[i],dp[j]+1);
                
                res=max(res,dp[i]);
                
                
            }
        }
        return res;
    }
};

Approach-3(Binary Search)

