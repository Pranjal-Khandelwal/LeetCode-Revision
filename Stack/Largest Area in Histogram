Approach-1(Brute Force)
T.C-O(N^2)
S.C-O(1)

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int maxArea=0;
        int n=heights.size();
        for(int i=0;i<n;i++)
        {
         int height=heights[i];
            
            for(int j=i;j<n;j++)
            {
                height=min(height,heights[j]);
                maxArea=max(maxArea,height*(j-i+1));
            }
                
        }
        return maxArea;
    }
};
Approach-2(Using Stack)
T.C-O(N)
S.C-O(1)

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
      
        stack<int> st;
        int res=0;
        
        heights.push_back(0);
        
        for(int i=0;i<heights.size();i++){
            while(!st.empty() && heights[st.top()]>=heights[i]){
                int tmp;
                int top=heights[st.top()];
                st.pop();
                
                if(!st.empty())
                    tmp=st.top();
                else
                    tmp=-1;
                
               res=max(res,top*(i-tmp-1));
            }
            st.push(i);
        }
        return res;
    }
};
