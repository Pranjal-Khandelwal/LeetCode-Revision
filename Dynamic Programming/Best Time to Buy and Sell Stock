Approach-1(Brute Force)
T.C-O(N^2)
S.C-O(1)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        
        int max_profit=0;
        
        for(int i=0;i<n-1;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                max_profit=max(max_profit,prices[j]-prices[i]);
            }
        }
        return max_profit;
    }
};


Approach-2(Dynamic Programming)
T.C-O(N)
S.C-O(1)

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        int mini=INT_MAX;
        int max_profit=0;
        
        for(int i=0;i<n;i++)
        {
            if(prices[i]<mini)
                mini=prices[i];
            max_profit=max(max_profit,prices[i]-mini);
        }
        return max_profit;
    }
};
