Approach-1(Recursion)
T.C.-O(3^N)

class Solution {
public:
    int ballonBurst(int i,int j,vector<int>& nums,vector<vector<int>>& dp)
    {
        if(i>j)return 0;
        
        if(dp[i][j]!=-1)
            return dp[i][j];
        
        int maxi=INT_MIN;
        
        for(int ind=i;ind<=j;ind++)
        {
            int cost=nums[i-1]*nums[ind]*nums[j+1]+ballonBurst(i,ind-1,nums,dp)+ballonBurst(ind+1,j,nums,dp);
            maxi=max(maxi,cost);
        }
        return maxi;
    }
    int maxCoins(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        
        nums.push_back(1);
        nums.insert(nums.begin(),1);
        return ballonBurst(1,n,nums,dp);
    }
};

Approach-2(Memoization)
T.C.-O(N^3)
S.C.-O(N^2)+O(N)--AUXILLARY Space

class Solution {
public:
    int ballonBurst(int i,int j,vector<int>& nums,vector<vector<int>>& dp)
    {
        if(i>j)return 0;
        
        if(dp[i][j]!=-1)
            return dp[i][j];
        
        int maxi=INT_MIN;
        
        for(int ind=i;ind<=j;ind++)
        {
            int cost=nums[i-1]*nums[ind]*nums[j+1]+ballonBurst(i,ind-1,nums,dp)+ballonBurst(ind+1,j,nums,dp);
            maxi=max(maxi,cost);
        }
        return dp[i][j]=maxi;
    }
    int maxCoins(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        
        nums.push_back(1);
        nums.insert(nums.begin(),1);
        return ballonBurst(1,n,nums,dp);
    }
};

Approach-3(Tabulation)
T.C.-O(N^3)
S.C.-O(N^2)

class Solution {
public:
    int ballonBurst(int i,int j,vector<int>& nums,vector<vector<int>>& dp)
    {
        if(i>j)return 0;
        
        if(dp[i][j]!=-1)
            return dp[i][j];
        
        int maxi=INT_MIN;
        
        for(int ind=i;ind<=j;ind++)
        {
            int cost=nums[i-1]*nums[ind]*nums[j+1]+ballonBurst(i,ind-1,nums,dp)+ballonBurst(ind+1,j,nums,dp);
            maxi=max(maxi,cost);
        }
        return dp[i][j]=maxi;
    }
    int maxCoins(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>>dp(n+2,vector<int>(n+2,0));
        
        nums.push_back(1);
        nums.insert(nums.begin(),1);
        
        for(int i=n;i>=1;i--)
        {
            for(int j=1;j<=n;j++)
            {
                if(i>j)
                    continue;
                
                int maxi=INT_MIN;
        
            for(int ind=i;ind<=j;ind++)
             {
              int cost=nums[i-1]*nums[ind]*nums[j+1]+dp[i][ind-1]+dp[ind+1][j];
                maxi=max(maxi,cost);
        }
                dp[i][j]=maxi;
            }
        }
        return dp[1][n];
    }
};
