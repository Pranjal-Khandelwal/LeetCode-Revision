T.C-O(N*M)
S.C-O(1)


class Solution {
public:
    
  void dfs(vector<vector<int>>&isConnected,vector<vector<int>>& visited,int row,int col)
  {
      
	if(row<0 || row> isConnected.size() || col<0 || col> isConnected.size()) 
        return ;
      
	visited[row][col]=1;
	visited[col][row]=1;
      
	for(int i=0;i<isConnected[0].size();i++){
		if(!visited[col][i] && isConnected[col][i] == 1) 
            dfs(isConnected,visited,col,i);
	}
	return ;
}
    
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n=isConnected.size();
        int total_provinces=0;
        
        vector<vector<int>>visited(n,vector<int>(n,0));
        
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(!visited[i][j] && isConnected[i][j]==1)
                {
                    dfs(isConnected,visited,i,j);
                    total_provinces++;
                }
            }
        }
        return total_provinces;
    }
};

Approach-2(Using Union Find)
class Solution {
public:
    int findPar(vector<int>& parent,int node)
    {
        if(parent[node]==-1){
            return node;
        }
        else{
            return parent[node]=findPar(parent,parent[node]);
        }
    }
    
    int findCircleNum(vector<vector<int>>& isConnected) {
        vector<int>parent(isConnected.size(),-1);
        int provinces=isConnected.size();
        
        for(int i=0;i<isConnected.size();i++)
        {
            for(int j=0;j<isConnected[0].size();j++)
            {
                if(isConnected[i][j]==1)
                {
                    int u=findPar(parent,i);
                    int v=findPar(parent,j);
                    
                    if(u!=v){
                        provinces--;
                    parent[u]=v;
                }
                }

                }
        }  
        return provinces;
    }
};
Approach-2(Using Union Find)
class Solution {
public:
    int findPar(vector<int>& parent,int node)
    {
        if(parent[node]==-1){
            return node;
        }
        else{
            return parent[node]=findPar(parent,parent[node]);
        }
    }
    
    int findCircleNum(vector<vector<int>>& isConnected) {
        vector<int>parent(isConnected.size(),-1);
        int provinces=isConnected.size();
        
        for(int i=0;i<isConnected.size();i++)
        {
            for(int j=0;j<isConnected[0].size();j++)
            {
                if(isConnected[i][j]==1)
                {
                    int u=findPar(parent,i);
                    int v=findPar(parent,j);
                    
                    if(u!=v){
                        provinces--;
                    parent[u]=v;
                }
                }

                }
        }  
        return provinces;
    }
};
