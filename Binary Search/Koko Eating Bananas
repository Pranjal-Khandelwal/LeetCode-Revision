Approach-2(Binary Search)
T.C-O(
class Solution {
public:
    int kokoEating(vector<int>&piles,int h,int& mid)
    {
        int res=0;
       for(int p:piles){
                if(p%mid==0)
                    res+=p/mid;
               else
                   res+=p/mid+1;
            } 
        
        return res<=h;
        
    }
    int minEatingSpeed(vector<int>& piles, int h) {
        
        
        int low=1;
        int high=*max_element(piles.begin(),piles.end());
    
        while(low<high)
        {
            int mid=low+(high-low)/2;
            
                if(kokoEating(piles,h,mid))
                     high=mid;
                else
                    low=mid+1;
                 
        }
        return low;
    }
};
