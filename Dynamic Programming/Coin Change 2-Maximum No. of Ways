Approach-1(Recursion)

T.C-O(2^N)
S.C-O(1)

class Solution {
public:
    int coinChange(int amount,vector<int>& coins,int i)
    {
        if(amount==0)
            return 1;
        if(amount<0 || i==coins.size())
            return 0;
        
        if(amount<coins[i])
            return coinChange(amount,coins,i+1);
        
        return coinChange(amount,coins,i+1)+coinChange(amount-coins[i],coins,i);
    }
    int change(int amount, vector<int>& coins) {
        if(amount==0)
            return 1;
        if(coins.size()==0)
            return 0;
        
        return coinChange(amount,coins,0);
        
    }
};

Approach-2(Memoization)
T.C-O(N^2)
S.C-O(N^2)

class Solution {
public:
    
    int coinChange(int amount,vector<int>& coins,int n,vector<vector<int>>& dp)
    {
        if(amount==0)
            return 1;
        if(n==0)
            return 0;
        
        if(amount<0)
            return 0;
        
        if(dp[n][amount]!=-1)
            return dp[n][amount];
        
        if(amount<coins[n-1])
            return dp[n][amount]=coinChange(amount,coins,n-1,dp);
        
        return dp[n][amount]=coinChange(amount,coins,n-1,dp)+coinChange(amount-coins[n-1],coins,n,dp);
    }
    
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        vector<vector<int>>dp(n+1,vector<int>(amount+1,-1));
        
        if(amount==0)
            return 1;
        if(n==0)
            return 0;
        
        dp[n][amount]=coinChange(amount,coins,n,dp);
        
        return dp[n][amount];
        
    }
};



