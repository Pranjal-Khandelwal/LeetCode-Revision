Approach-(Using BFS)

T.C-O(N+E)
S.C.-O(N+E)+O(N)+O(N)


class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        
        vector<int>color(n,-1);
        
        for(int i=0;i<n;i++)
        {
            if(color[i]==-1)
            {
                if(!BipartiteBFS(i,graph,n,color))
                {
                    return false;
                }
            }
        }
        return true;
            
    }
    
    bool BipartiteBFS(int start,vector<vector<int>>& graph,int n,vector<int>& color)
    {
        queue<int>q;
        q.push(start);
        
        if(color[start]==-1)
            color[start]=1;
        
        while(!q.empty())
        {
            int node=q.front();
            q.pop();
            
            for(auto it:graph[node])
            {
                if(color[it]==-1)
                {
                    color[it]=1-color[node];
                    q.push(it);
                }
                else if(color[it]==color[node])
                    return false;
            }
        }
        return true;
    }
};

Approach-2(Using DFS)

T.C-O(N+E)
S.C-O(N+E)


class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int n=graph.size();
        
        vector<int>color(n,-1);
        
        for(int i=0;i<n;i++)
        {
                if(!BipartiteDFS(i,graph,color))
                {
                    return false;
                }
        }
        return true;
            
    }
    
    bool BipartiteDFS(int node,vector<vector<int>>& graph,vector<int>& color)
    {
        if(color[node]== -1)
            color[node]=1;
        
        for(auto it:graph[node])
        {
            if(color[it]==-1){
                color[it]=1-color[node];
            
            if(!BipartiteDFS(it,graph,color))
            {
                return false;
            }
            }
            else if(color[it]==color[node])
            {
                return false;
            }
            
        }
        return true;
    }
};

