Approach-1 (Brute Force)
class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        int n=nums.size();
        

        for(int i=0;i<n;i++)
        {
            int sum=0;
            
            for(int j=i;j<n;j++)
            {
                sum+=nums[j];
                
                if((j-i+1>=2))
                {
                if(k==0 && sum==0 || k!=0 && sum%k==0)
                    return true;
                
            }
        }
            
        }
        
        return false;
    }
};




Approach-2(Using map)

T.C-O(N)
S.C-O(N)


class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        int n=nums.size();
        int presum=0;
        int sum=0;
        
        
        map<int,int>mp;
        
        for(int i=0;i<n;i++)
        {
            if(k==0){
            sum+=nums[i];
                
            }
            else{
               sum=(sum+nums[i])%k; 
            }
            if(mp[sum])
                return true;
            
            mp[presum]++;
            
            presum=sum;
                
            
        }
        
        return false;
    }
};
