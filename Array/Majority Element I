Approach-1(Brute Force)
T.C.-O(N^2)
S.C.-O(1)

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n=nums.size();
        
        int majorityElement=n/2;
        
        
        
        
        for(int i=0;i<n;i++)
        {
            int value=nums[i];
            int count=0;
        for(int j=0;j<n;j++)
        {
            if(nums[j]==value)
                count++;  
        }
            
            if(count>majorityElement)
                return value;
        }
        return -1;
    }
};

Approach-2(Using sorting)
T.C.-O(NLOGN)
S.C.-O(1)

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        
        return nums[nums.size()/2];
    }
};

Approach-3(Using Unordered_map)
T.C.-O(N)
S.C.-O(N)

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n=nums.size();
        unordered_map<int,int>mp;
        int index;
        
        for(int i=0;i<n;i++)
        {
            mp[nums[i]]++;
             if(mp[nums[i]]>n/2)
                index=i;
        }
        
        return nums[index];
        
    }
};



