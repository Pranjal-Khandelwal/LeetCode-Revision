Approach-1(Recursion)
T.C-O(2^N)
S.C-O(1)
class Solution {
public:
    int CountPalindrome(string s,int i,int j)
    {
        if(i>=j)
            return 1;
        if(s[i]!=s[j])
            return 0;
        
        return CountPalindrome(s,i+1,j-1);
        
        
    }
    int countSubstrings(string s) {
        int count=0;
         for(int i=0;i<s.size();i++)
         {
             for(int j=i;j<s.size();j++)
             {
                 if(CountPalindrome(s,i,j))
                     count++;
             }
         }
        return count;
    }
};

Approach-2(Dynamic Programming)
T.C-O(N^2)
S.C-O(1)

class Solution {
public:
    int dp[1002][1002];
    int CountPalindrome(string s,int i,int j)
    {
        if(i>=j) 
            return 1;
        if(dp[i][j] != -1) 
            return dp[i][j];
        if(s[i] != s[j])
            return dp[i][j] = 0;
        return dp[i][j] = CountPalindrome(s,i+1,j-1);
         
    }
    int countSubstrings(string s) {
        int count = 0;
    memset(dp,-1,sizeof(dp));
        for(int i=0;i<s.length();i++) {
            for(int j=i;j<s.length();j++) {
                if(CountPalindrome(s,i,j))
                    count++;
            }
        }
        return count;
    }
};



Approach-3
T.C-O(N^2)
S.C-O(1)
Class Solution {
public:
    int Countpalindrome(string s,int low,int high)
    {
        int count=0;
        while(low>=0 && high<=s.size()- 1 && s[low--]==s[high++]){
            
        count++;
        }
        return count;
        
    }
    int countSubstrings(string s) {
         int count=0;
        for(int i=0;i<s.size();i++)
        {
            count+=Countpalindrome(s,i,i); 
            count+=Countpalindrome(s,i,i+1); 
        }
        return count;
    }
};
