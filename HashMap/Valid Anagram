Approach-1(sorting)
T.C-O(nlogn)
S.C-O(1)

class Solution {
public:
    bool isAnagram(string s, string t) {
        int n=s.size();
        int m=t.size();
        
        if(n!=m)
            return false;
        
        sort(s.begin(),s.end());
        sort(t.begin(),t.end());
        
        for(int i=0;i<n;i++)
        {
            if(s[i]!=t[i])
                return false;
        }
        return true;
    }
};

Approach-2(Hashmap)
T.C-O(N)
S.C-O(N)

lass Solution {
public:
    bool isAnagram(string s, string t) {
        int n=s.size();
        int m=t.size();
        
        int count[256]={0};
        
        if(n!=m)
            return false;
        
        for(auto x:s)
        {
            count[x]++;
        }
        
        for(auto y:t)
        {
            count[y]--;
        }
        
        for(int i=0;i<256;i++)
        {
            if(count[i])
                return false;
        }
        return true;
    }
};
