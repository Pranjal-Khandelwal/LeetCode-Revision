Approach-1(Recursion)
T.C-O(N)
S.C-O(1)

Class Solution {
public:
    int minCostClimbingStairsUtil(vector<int>& cost,int n)
    {
        if(n<0)
            return 0;
        if(n==1 || n==2)
            return cost[n];
        
        return min(minCostClimbingStairsUtil(cost,n-1),minCostClimbingStairsUtil(cost,n-2))+cost[n];
    }
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        
        return min(minCostClimbingStairsUtil(cost,n-1),minCostClimbingStairsUtil(cost,n-2));
        
    }
};






Approcah-2(Dynamic Programming)
T.C-O(N)
S.C-O(1)

class Solution {
public:
    
    int min_cost(vector<int>& cost)
    {
         int n=cost.size();
        for(int i=2;i<n;i++)
            cost[i]=min(cost[i-1],cost[i-2])+cost[i];
        return min(cost[n-1],cost[n-2]);
    }
};
