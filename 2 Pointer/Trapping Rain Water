Approach-1(Brute Force Approach-1)
T.C-O(N^2)
S.C-O(1)

class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        int result=0;
        
        for(int i=1;i<n-1;i++)
        {
            int left=height[i];
            
            for(int j=0;j<i;j++)
            {
            left=max(left,height[j]);
            }
        
            int right=height[i];
            
            for(int j=i;j<n;j++)
            {
                right=max(right,height[j]);
            }
            
            result+=(min(left,right)-height[i]);
        }
        return result;
    }
};

Approach-2 (Dynamic Programming)
T.C-O(N)
S.C-O(N)

class Solution {
public:
    int trap(vector<int>& height) {
        int n=height.size();
        if(n==0)
            return 0;
        int result=0;
        
        vector<int>left(n);
        vector<int>right(n);
        
        left[0]=height[0];
        for(int i=1;i<n;i++)
        {
            left[i]=max(left[i-1],height[i]);
        }
         right[n-1]=height[n-1];
        
        for(int i=n-2;i>=0;i--)
        {
            right[i]=max(right[i+1],height[i]);
        }
        for(int i=0;i<n-1;i++){
        result+= min(left[i],right[i])-height[i];
        }
        return result;
    }
};
