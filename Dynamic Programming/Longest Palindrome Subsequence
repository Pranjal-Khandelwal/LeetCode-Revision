Approach-1(Recursion)
class Solution {
public:
    int LPS(string s,int i,int j)
        {
        if(i==j)
            return 1;
        
        if(s[i]==s[j] && i+1==j)
            return 2;
        
        if(s[i]==s[j])
            return LPS(s,i+1,j-1)+2;
        
        return max(LPS(s,i+1,j),LPS(s,i,j-1));
        }
        
    int longestPalindromeSubseq(string s) {
        int n=s.size();
        return LPS(s,0,n-1);
    }
};

Approach-2(BOTTOM-UP)
S.C-O(N^2)
T.C-O(N^2)
class Solution {
public:
    int dp[1001][1001];
    int LPS(string s,int i,int j)
        {
            if(dp[i][j]!=-1)
                return dp[i][j];
        if(i==j)
            return 1;
        if(i>j)
            return 0;
        
        if(s[i]==s[j])
           return dp[i][j]=LPS(s,i+1,j-1)+2;
        
     return  dp[i][j] =max(LPS(s,i+1,j),LPS(s,i,j-1));
            
        }
        
    int longestPalindromeSubseq(string s) {
        int n=s.size();
        memset(dp,-1,sizeof(dp));
        return LPS(s,0,n-1);
    }
};

Approach-3(TopDown)
S.C-O(N^2)
T.C-O(N^2)

class Solution {
public:
    
        
    int longestPalindromeSubseq(string s) {
        int n=s.size();
        int dp[n+1][n+1];
        string str1=s;
        string str2=s;
        reverse(str2.begin(),str2.end());
        
        for(int i=0;i<=n;i++){
            dp[i][0]=0;
            }
        for(int j=0;j<=n;j++)
        {
            dp[0][j]=0;
            }
        for(int i=1;i<=n;i++)
            {
            for(int j=1;j<=n;j++)
                {
                if(str1[i-1]==str2[j-1]){
                    dp[i][j]=dp[i-1][j-1]+1;
                    }else{
                
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                    }
                
                
                }
            }
        return dp[n][n];
        
    }
};
