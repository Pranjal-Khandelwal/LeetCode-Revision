Approach-1(Brute Force)
T.C.-O(N^2)
S.C.-O(1)

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        if(p.size()>s.size())
        return {};
        
        sort(p.begin(),p.end());
        vector<int>res;
        
        for(int i=0;i<=s.size()-p.size();i++)
        {
            string t;
            for(int j=i;j<i+p.size();j++)
            {
             t+=s[j];   
            }
            sort(t.begin(),t.end());
            if(t==p)
                res.push_back(i);
        }
        return res;
    }
};

Approach-2(Sliding Window)
T.C.-O(N)
S.C.-O(N)

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        unordered_map<char,int>mp;
        
        for(int i=0;i<p.size();i++)
        {
            mp[p[i]]++;
        }
        
        int i=0,j=0;
        int n=s.size();
        int k=p.size();
        
        int count=mp.size();
        vector<int>res;
        
        while(j<s.size())
        {
            if(mp.find(s[j])!=mp.end())
            {
                mp[s[j]]--;
                if(mp[s[j]]==0)
                    count--;
            }
               
               if(j-i+1==k)
               {
                   if(count==0)
                   res.push_back(i);
                    if(mp.find(s[i])!=mp.end())
            {
                mp[s[i]]++;
                if(mp[s[i]]==1)
                   count++;
            }
            i++;
        }
        j++;
    }
               return res;
    }
};
