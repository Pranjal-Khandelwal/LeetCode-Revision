Approach-1(Using Btrute Force)

T.C-O(N)
S.C.-O(N)

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n=nums.size();
        int res;
        bool store[n+1];
        
        for(int i=0;i<=n;i++)
            store[i]=false;
        
        
        for(int i=0;i<n;i++)
        {
            if(nums[i]>0 && nums[i]<=n)
                store[nums[i]-1]=true;
        }
        
        for(int i=0;i<=n;i++)
            if(store[i]==false)
            {
                res=i+1;
                break;
            }
        return res;
    }
};

Approach-2(Optimized without using extra space)
T.C.-O(N)
S.C.-O(1)

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
      int n=nums.size();
        
        for(int i=0;i<n;i++)
            while(nums[i]>0 && nums[i]<=n && nums[nums[i] - 1] != nums[i])
                swap(nums[i],nums[nums[i]-1]);
        
        for(int i=0;i<n;i++)
        {
            if(nums[i]!=i+1)
                return i+1;
        }
        return n+1;
    }
};
