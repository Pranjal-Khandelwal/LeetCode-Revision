Approach-1(Brute Force Solution)
T.C.-O(N^2)
S.C.-O(1)

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n=nums.size();
        
        vector<int>v;
        
        for(int i=0;i<n;i++)
        {
            int value=nums[i];
            int counting =0;
            
            for(int j=0;j<n;j++)
            {
                if(nums[j]==value)
                    counting++;
            }
            
            if(counting>n/3 && !count(v.begin(), v.end(), value) ){
            v.push_back(value);
            }
        }
        return v;
    }
};



Approach-2 (Using Unordered_map)
T.C.-O(N)
S.C.-O(N)

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n=nums.size();
        vector<int>res;
        unordered_map<int,int>mp;
        
        for(int i=0;i<n;i++)
        {
            mp[nums[i]]++;
        }
        
        for(auto x:mp){
          if(x.second>n/3)
                res.push_back(x.first);  
        }
        return res;
    }
};
