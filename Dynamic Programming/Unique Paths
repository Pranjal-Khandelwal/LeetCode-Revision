Approach-1 (Recursion)
T.C-O(2^n)
S.C-O(1)

class Solution {
public:
    int uniquePaths(int m, int n) {
    
        if(n==1 || m==1)
            return 1;
        
        return uniquePaths(m,n-1)+uniquePaths(m-1,n);
    }
};

Approach-2 (Dynamic Programming)
T.C-O(N^2)
S.C-O(N)

class Solution {
public:
    int uniquePaths(int m, int n) {
        int dp[m][n];
        
        for(int i=0;i<m;i++)
        {
            dp[i][0]=1;
        }
        
        for(int j=0;j<n;j++)
        {
            dp[0][j]=1;
        }
        
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            {
               dp[i][j]=dp[i-1][j]+dp[i][j-1]; 
            }
        }
        return dp[m-1][n-1];
    }
};
