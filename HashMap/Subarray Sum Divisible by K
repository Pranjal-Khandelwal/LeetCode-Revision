Approach-1(Brute Force)
T.C.-O(N^2)
S.C.-O(1)

class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        int n=nums.size();
        
          int count=0;
        for(int i=0;i<n;i++)
        {
             int sum=0;
           for(int j=i;j<n;j++)
           {
               sum+=nums[j];
               
               if(sum%k==0)
                   count++;
           }
        }
        
        return count;
    }
};

Approach-2(Using Hashmap)
T.C.-O(N)
S.C.-O(N)

class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        int n=nums.size();
        int count=0;
        long long sum=0;
        
        unordered_map<int,int>mp;
        
        mp[0]=1;
        
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
            
            int remainder=sum%k;
        
            if(remainder<0)
                remainder=remainder+k;
            
            if(mp.find(remainder)!=mp.end())
            {
                count+=mp[remainder];
            }
            mp[remainder]++;
        }
        return count;
    }
};
