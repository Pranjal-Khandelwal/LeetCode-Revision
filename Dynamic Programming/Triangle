Approach-1(Recursion)
T.C-O(2
class Solution {
public:
    int minPathTriangle(vector<vector<int>>&triangle,int n,int m)
    {
         if(n == triangle.size()) {
             return 0;
        }  
        return min(minPathTriangle(triangle,n+1,m),minPathTriangle(triangle,n+1,m+1))+triangle[n][m]; 
}
    int minimumTotal(vector<vector<int>>& triangle) {
        
        return minPathTriangle(triangle,0,0);
        
    }
};

Approach-2 (Memoization)

class Solution {
public:
    int minPathTriangle(vector<vector<int>>&triangle,int n,int m,vector<vector<int>>& dp)
    {
         if(n == triangle.size()) {
             return 0;
        }  
        if(dp[n][m]!=-1)
            return dp[n][m];
        
return dp[n][m]=min(minPathTriangle(triangle,n+1,m,dp),minPathTriangle(triangle,n+1,m+1,dp))+triangle[n][m]; 
}
    int minimumTotal(vector<vector<int>>& triangle) {
        int n=triangle.size();
        int m=n;
        
        int res=INT_MAX;
        
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        
        return res= minPathTriangle(triangle,0,0,dp);
        
    }
};
