T.C-O(4^N)
S.C-O(1)

class Solution {
public:
    
    int dfs(vector<vector<int>>& grid,int i,int j,int steps,int x_steps)
    {
        
        if(i<0 || i>=grid.size() || j<0 || j>=grid[0].size() || grid[i][j]==-1)
            return 0;
            
        
        if(grid[i][j]==2)
        {
            if(steps==x_steps){
                return 1;
            }
            else{
                return 0;
            }
        }
        grid[i][j]=-1;
        
        int total_paths=dfs(grid,i+1,j,steps+1,x_steps)+dfs(grid,i-1,j,steps+1,x_steps)
            +dfs(grid,i,j-1,steps+1,x_steps)+dfs(grid,i,j+1,steps+1,x_steps);
            
            grid[i][j]=0;
        
        return total_paths;
        
    }
    int uniquePathsIII(vector<vector<int>>& grid) {
        int n=grid.size(),m=grid[0].size();
     
        int i1,j1,x_steps=0;
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                    i1=i,j1=j;
                    
                if(grid[i][j]!=-1)
                    x_steps++;
                    
            }
        }
        return dfs(grid,i1,j1,1,x_steps);
    }
};
