T.C-O(N)
S.C-O(N)

APPROACH-1(Backtracking)
T.C-O(N*2^N)
S.C-O(N)

class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>>res;
        vector<string>path;
        helper(0,s,path,res);
        return res;
    }
void helper(int index,string s,vector<string>& path,vector<vector<string>>& res)
{
    if(index==s.size()){
        res.push_back(path);
        return;
    }
    for(int i=index;i<s.size();i++)
    {
        if(isPalindrome(s,index,i)){
        path.push_back(s.substr(index,i-index+1));
        helper(i+1,s,path,res);
        path.pop_back();
            
        }
    }
}
    
    bool isPalindrome(string s,int start,int end)
    {
        while(start<=end){
        if(s[start++]!=s[end--])
            return false;
        }
        return true;
    }

};

Approach-2(DP+BACKTRACKING)'
T.C-O(N^2)
S.C-O(N^2)

class Solution {
public:
    vector<vector<string>> partition( string s ) {
        int n = s.size();
        vector<vector<bool>> dp( n, vector<bool>(n,false) );
    	for( int i=0; i<n; i++ ) dp[i][i] = true;

        for( int i=n-1; i >= 0; i-- )
    		for( int j=i+1; j < n; j++ )
		    	if( s[i] == s[j] && ( dp[i+1][j-1] || j-i <= 2 ) )
			    	dp[i][j] = true;
        
        vector<vector<string>> res;
        vector<string> path;
        helper( res, path, 0, s, dp );
        return res;
    }
    
private:
    void helper( vector<vector<string>>& res, vector<string>& path,
                   int index, string& s, vector<vector<bool>> &dp ) {
        
        if( index == s.size() ) {
            res.push_back(path);
            return;
        }
        for( int i=index; i < s.size(); i++ ) {
            if( dp[index][i] ) {
                path.push_back( s.substr( index, i - index + 1 ) );
                helper( res, path, i+1, s, dp );
                path.pop_back();
            }
        }
    }
};
